#pragma once

#include "Tool_Defines.h"
#include "Level.h"
#include "TerrainManager.h"

BEGIN(Engine)
class CTransform;
END

BEGIN(Tool)

class CLevel_Animation final : public CLevel
{

	enum CHARACTERKIND { CHARACTER_SPONGBOB, CHARACTER_BOSS_SANADY, CHARACTER_PATRICK,  CHARACTER_END};
	//SpongeBob
	enum SPONGEBOB_ACTION {
		SPONGEBOB_IDLE, SPONGEBOB_WALK, SPONGEBOB_JUMPUP, SPONGEBOB_RUN, SPONGEBOB_DEATH, SPONGEBOB_ATTACK, SPONGEBOB_JUMPDW, SPONGEBOB_JUMP_LANDING_EYE, 
		SPONGEBOB_BUBLE_START, SPONGEBOB_BUBLE_LANDING, SPONGEBOB_BUBLE_LOOP, SPONGEBOB_BUBLE_SPINE, SPONGEBOB_BASH_LOOP,
		SPONGEBOB_POSEIDOME_INTRO_0, SPONGEBOB_POSEIDOME_INTRO_1, SPONGEBOB_POSEIDOME_INTRO_2, SPONGEBOB_POSEIDOME_INTRO_3, SPONGEBOB_POSEIDOME_INTRO_4, 
		SPONGEBOB_POSEIDOME_OUTRO0, SPONGEBOB_POSEIDOME_OUTRO1, SPONGEBOB_POSEIDOME_OUTRO2, 
		SPONGEBOB_POSEIDOME_ROUND2_0, SPONGEBOB_POSEIDOME_ROUND2_1, SPONGEBOB_POSEIDOME_ROUND2_2, SPONGEBOB_POSEIDOME_ROUND2_3,
		SPONGEBOB_POSEIDOME_ROUND3_0, SPONGEBOB_POSEIDOME_ROUND3_1, SPONGEBOB_HIT, SPONGEBOB_ACTION_END };
	//sandy
	enum SANDY_ACTION {
		SANDY_INTRO, SANDY_IDLE, SANDY_WALK, SANDY_RUN, SANDY_DEATH, SANDY_DEATH_STOP, SANDY_ATTACK_SPRING_START, SANDY_ATTACK_SPRING1, SANDY_ATTACK_SPRING2,
		SANDY_ATTACK_FALLDOWN, SANDY_ATTACK_JUMP_START, SANDY_ATTACK_JUMP1, SANDY_ATTACK_JUMP2, SANDY_ATTACK_HAND,
		SANDY_HIT_SIT_TOUCH_HEAD1, SANDY_HIT_SIT_TOUCH_HEAD2, SANDY_HIT_SIT_ELECTIVICITY, SANDY_HIT_UP_ELECTIVICITY, SANDY_HIT_SIT_ELECTIVICITY_90AGREE,
		SANDY_PROVOKE_SIT_THRUST_HEAD, SANDY_PROVOKE_SIT_THRUST_HEAD_SHAKE, SANDY_SIT_THRUST_HAND, SANDY_PROVOKE_WALK_THRUST_HEAD, SANDY_PROVOKE_HAND,
		SANDY_GET_HELMET, SANDY_FIXING_HELMET, SANDY_ATTACK_SPRING3, SANDY_ATTACK_SPRING4,  SANDY_ACTION_END
	};

	//Patrick
	enum PATRICK_ACTION {
		PATRICK_ATTACK, PATRICK_DEATH, PATRICK_HIT, PATRICK_IDLE, PATRICK_JUMP_DW, PATRICK_JUMP_UP, PATRICK_INTRO_2, PATRICK_INTRO_3, PATRICK_INTRO_7, 
		PATRICK_OUTTRO_0, PATRICK_ROUND2_1, PATRICK_ROUND2_2, PATRICK_ROUND2_4, PATRICK_ROUND3_1, PATRICK_ROUND3_2,
		PATRICK_PICKUP, PATRICK_PICKUP_IDLE, PATRICK_PICKUP_JUMP_DW, PATRICK_PICKUP_JUMP_UP, PATRICK_PICKUP_WALK, PATRICK_PICKUP_RUN, PATRICK_SLAM_END, PATRICK_SLAM_LOOP, PATRICK_SLAM_START, 
		PATRICK_TALK, PATRICK_THROW, PATRICK_VICTORY, PATRICK_WALK, PATRICK_WATCHING_DOME, PATRICK_PATRICK_ACTION_END
	};

	typedef struct ActionDesc
	{
		string Action;

	}ACTIONDESC;

	typedef struct ActionInfoDesc
	{
		_int ActionLevel;
		_int ActionIndex;

	}ACTIONINFODESC;




private:
	CLevel_Animation(ID3D11Device* pDevice, ID3D11DeviceContext* pContext);
	virtual ~CLevel_Animation() = default;
	static _bool compare(const ACTIONINFODESC &a, const ACTIONINFODESC &b)
	{
		if (a.ActionLevel < b.ActionLevel)
			return true;
		else
			return false;
	}
	

public:
	virtual HRESULT NativeConstruct() override;
	virtual void Tick(_float fTimeDelta);
	virtual void LateTick(_float fTimeDelta);
	virtual HRESULT Render() override;

private:
	HRESULT	Ready_Prototype_Component();
	HRESULT	Ready_Clone_GameObject();
	/*CCube_Manager* m_pCubeMgrInstance = nullptr;
	CToolObject_Manager* m_pMonsterMgrInstance = nullptr;*/
	HRESULT DBConnection();
	HRESULT SelectMesh();
	void State_Info(_int _sateInfo);

private:
	ID3D11Device*			m_pDevice = nullptr;
	ID3D11DeviceContext*	m_pContext = nullptr;
	_bool m_IsConnection = false;
	string m_sTable;
	sqlite3* db;

	vector<string> m_vActionList;
	vector<string> m_vPatternNameList;

	ACTIONDESC m_actionDesc;
	vector<ACTIONINFODESC> m_AnimationInfo;
	_int CharacterPick = 0;
	_int AnimationPick = 0;

	vector<_uint> m_vPatternList;




	//ACTIONINFODESC m_AnimationInfo;
public:
	HRESULT SelectTable();
public:
	static CLevel_Animation* Create(ID3D11Device* pDevice, ID3D11DeviceContext* pContext);
	virtual void Free() override;
};

END